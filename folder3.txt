* To get rid of your data, you can simply load the database you want to get rid of
 (use databaseName and then execute 
 db.dropDatabase().

  Similarly, you could get rid of a single collection in a database via 
  db.myCollection.drop().

  e.g 
    > show dbs
    AlienDBex  0.000GB
    admin      0.000GB
    config     0.000GB
    flights    0.000GB
    local      0.000GB
    > use flights
    switched to db flights
    > db.dropDatabase()
    { "dropped" : "flights", "ok" : 1 }
    >


*** DataTypes in MongoDB
  1. Text 
    overall size for a document is 16mb
  2. Boolean
  3. Number 
    Integer(int32), NumberLong(int64), everything will be considered as 64bit float value in shell,
    NumberDecimal (floating point values also called doubles)
  4. ObjectId : special objects automatically generated by MongoDB
  5. ISODate
  6. Embedded Documents {a:{}}
  7. Arrays => list of any values 

** Understanding relations:
  1. One to one : use nested doucments,
                : use ObjectId as a reference
                (One collection is of a person and another collection is of car, so if perticular
                person is having that car, we can mention that owenr with the same ObjectId)
  2. One to many : use nested documents, {we can nest upto 100 levels}
                 : with splitting in collections (ObjectId can be made common)
  3. Many to many : referencing in a nested documents
                  : with reference and depending on the condtions whether which of the data changes frequently

** $lookup 
This operations MongoDB offers for merging related documents that you split up by using the reference approach.
so where you got no embedded documents and that is the lookup operator.
   It is essentially a helpful tool tata allows you to fetch two related documents merged together in one 
   document, in one step having to do two steps.
 db.books.aggregate([{$lookup:{from:"authors", localField:"authors",foreignField:"_id" ,as :"creators"}}])
 Here from:"authors" means form a authors collection. localField: authors lies books collection, So in authors 
 , in books I have ObjectId stored where the matching equivalence can be found in _id in the authors collection.
 creators is the name of the alias which we can give.

 ** Validation 
   Another way to create a collection is :
   db.runCommand({
  collMod: 'posts',
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['title', 'text', 'creator', 'comments'],
      properties: {
        title: {
          bsonType: 'string',
          description: 'must be a string and is required'
        },
        text: {
          bsonType: 'string',
          description: 'must be a string and is required'
        },
        creator: {
          bsonType: 'objectId',
          description: 'must be an objectid and is required'
        },
        comments: {
          bsonType: 'array',
          description: 'must be an array and is required',
          items: {
            bsonType: 'object',
            required: ['text', 'author'],
            properties: {
              text: {
                bsonType: 'string',
                description: 'must be a string and is required'
              },
              author: {
                bsonType: 'objectId',
                description: 'must be an objectid and is required'
              }
            }
          }
        }
      }
    }
  },
  validationAction: 'warn'
});


  * db.runCommand({collMod: 'posts'})



