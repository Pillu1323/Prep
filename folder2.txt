MongoDB commands
1. Open cmd : type : mongod   To start MongoDB server
2. for different port type : mongod --port 27018 
3. Open another cmd : mongo => this is mongo Shell which is connected to the up & running server
4. cls for clear the screen

5. show dbs => to see the existing dbs 
6. use => to switch to a db or we can create one with use  
7. db.collectionName.QuerryCommands
  e.g db.flightData.insertOne()
  A document is always declared  with curley braces

  db.flightData.insertOne({
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("606c6415c402f050679cb329")

    db.flightData.insertMany([{}, {}, {}])
    e.g. 
db.flightData.insertMany([
  {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,    
    "intercontinental": false
  }
])

// find
8. db.flightData.find().pretty()    // it finds all the docs and pretty makes it pretty
   db.flightData.find(filter)       // to find specific flightData
e.g. db.flightData.find({distance:{$gt:1000}})
       // finds the docs which has distance  greter than 1000

    pretty() is not supported on findOne, as findOne does not return us the cursor
9. The commands works on the collections

// delete
10. db.flightData.deleteOne(filter)     // finds the first item with the filter and deletes item
    db.flightData.deleteOne({name:'Vaibhav'})  

    db.flightData.deleteMany({marker:'DELETE'})
// Update
11. db.flightData.updateOne(filter, update)
    db.flightData.updateOne({distance:1200},{marker:'DELETE'}) 
    // It finds the document with distance:12000 and added a new field into it as marker :DELETE
    // to do so it requires atomic operators
    // Atomic operators

  db.flightData.updateOne({filter:12000}, {$set:{marker:'DELETE'}})
  $set: => to describe the changes in MongoDB, this is Atomic operator

   db.flightData.updateMany({}, {$set:{marker:'DELETE'}}) // {} in filter means select all
        
   * differce between update and updateMany: 
   update overwrite the value 
   db.flightData.update({distance:12000}, {{marker:'DELETE'}})
   // this will overwrite the doc which contains distance:12000 

   e.g.
   
   { "_id" : "custom Id", "name" : "Vaibhav", "surname" : "Dani" } // this is the doc
   > db.flightData.update({name:'Vaibhav'},{marker:'Delete'})       // update
   { "_id" : "custom Id", "marker" : "Delete" }                    // result upon update

   * find() will gives you back a cursor and not all the data
   find().toArray() will exhaust the cursor and gives all the data. find() will give you first
   20 documents only

   db.passengers.find().forEach((passenger)=>{printjson(passenger)})


12. Projection 
db.passengers.find({filter}, {projection})
e.g. db.passengers.find({}, {name:1 , _id:0}) // here 1 is to include and 0 is to exclude
// projection happens on MongoDB server, so that it happens the data before shipped to you.
// so you don't get unnecessary data, you don't impact the bandwidth

13. Embedded documents
// Its core feacture of MongoDB
// that is nesting of documents
db.flightData.updateMany({},{$set:{status:{description:'On_time', Update: '1 Hr ago}}})

> db.flightData.updateMany({},{$set:{status:{description:'On_time', Update: '1 Hr ago'}}})
{ "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 4 }
> db.flightData.find().pretty()
{
        "_id" : ObjectId("606c6415c402f050679cb329"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true,
        "status" : {
                "description" : "On_time",
                "Update" : "1 Hr ago"
        }
}
{
        "_id" : "custom Id",
        "marker" : "Delete",
        "status" : {
                "description" : "On_time",
                "Update" : "1 Hr ago"
        }
}
{
        "_id" : ObjectId("606c7411c402f050679cb32a"),
        "name" : "omkar",
        "age" : 35,
        "status" : {
                "description" : "On_time",
                "Update" : "1 Hr ago"
        }
}
{
        "_id" : ObjectId("606c7411c402f050679cb32b"),
        "address" : "Jai bhawani nagar",
        "location" : "aurangabad",
        "status" : {                              // this status is kind of embedded document
                "description" : "On_time",
                "Update" : "1 Hr ago"
        }
}
>
to find the docs with description is 'On_time'
db.flightData.find({"status.description" :'On_time'})

14. Arrays of data
// we have our passengers db, in that there we have to mention the hobbies for "Albert Twostone"
// so we can use arrays 

db.passengers.updateOne({name:'Albert Twostone'},{$set:{hobbies:['sport','cooking']}})
//[] may contain [{},{},{}] or [" ", " ",] 

 {
                "_id" : ObjectId("606c857bc402f050679cb33f"),
                "name" : "Albert Twostone",
                "age" : 68,
                "hobbies" : [
                        "sport",
                        "cooking"
                ]
        },

to access this hobbies =>
db.passengers.findOne({name:'Albert Twostone'}).hobbies
> ['sport', 'cooking']